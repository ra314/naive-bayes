data = preprocess('train.csv')
test = preprocess('test.csv')
group = data[data[0] == "warrior1"]

#CROSS VALIDATION
cross_validation(data, 5, "classic", [], True)
cross_validation(data, 5, "KDE", [9], True)
cross_validation(data, 5, "coordinate_absence", [], True)
cross_validation(data, 5, "coordinate_presence", [], True)
cross_validation(data, 5, "height_and_width", [], True)
cross_validation(data, 5, "height_to_width_ratio", [], True)
cross_validation(data, 5, "discretized_height_to_width_ratio", [], True)
cross_validation(data, 5, "closest_points", [], True)
cross_validation(data, 5, "arms_above_head", [], True)
cross_validation(data, 5, "perpendicular_torso", [], True)
cross_validation(data, 5, "distance_between_points", [], True)


#RANDOM HOLDOUT
random_hold_out(data, 0.8, "classic", [], True)
random_hold_out(data, 0.8, "absence_variable", [], True)
random_hold_out(data, 0.8, "mean_imputation", [], True)
random_hold_out(data, 0.8, "KDE", [9], True)

#DEMONSTRATION OF SPEEDUP
import time
start = time.time()
predictions = predict(data, poses, "KDE", [9], True)
evaluate(predictions, data)
time.time() - start

start = time.time()
predictions = predict(data, poses, "KDE", [9], False)
evaluate(predictions, data)
time.time() - start

#TESTING CLASSIC
poses = train(data, "classic", [])
predictions = predict(test, poses, "classic", [], True)
evaluate(predictions, test)

#TESTING ABSENCE
poses = train(data, "absence_variable")
predictions = predict(test, poses, "absence_variable", [], True)
evaluate(predictions, test)

#TESTING MEAN IMPUTATION
poses = train(data, "classic")
predictions = predict(test, poses, "mean_imputation", [], True)
evaluate(predictions, test)

#TESTING KDE
poses = train(data, "KDE", [9])
predictions = predict(test, poses, "KDE", [9], True)
evaluate(predictions, test)

#TESTING BOX AND CLOSEST
poses = train(data, "box_and_closest")
predictions = predict(test, poses, "box_and_closest", [], True)
evaluate(predictions, test)

#Picking bandwidth
optimize_bandwidth(data, 5, 5, 25, 0.1, True)

#Kmeans
data = preprocess('train.csv')
plot_heights_and_widths(data)

data = preprocess('train.csv')
cross_validation(data, 5, "perpendicular_torso", [], True)
poses = train(data, "perpendicular_torso")
for pose in poses:
	print(pose.name)
	print(pose.perpendicular_torso_probs)
